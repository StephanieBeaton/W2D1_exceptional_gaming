# Create a 2-player guessing game where players take turns to answer simple addition problems.
# The math questions are automatically generated by the game.
# It should do this by picking two numbers between 1 and 20.

# Example prompt: "Player 1: What does 5 plus 3 equal?"

# Both players start with 3 lives.
# They lose a life if they mis-answer a question.
# If a player gets a question wrong,
# the game should output the new scores for both players, so players know where they stand.

# The game doesn’t end until one of the players loses all their lives.
# At this point, the game should announce who won and what the other player’s score is.

# you can use gets.chomp to get input from users and puts for output.

# small and short methods that are responsible for discrete tasks.

# Some example methods to get you started:
#
#    * generate_question
#    * prompt_player_for_answer
#    * verify_answer

# Remember to also seperate your I/O (Input/output) methods
# from your logic methods.
# Logic methods will not use puts or gets and
# instead change the state of the game or perform other logic
# that other methods will perhaps tell or ask the user about.

#
# For variables outside any method, use @instance variables.
#

# Randomize the operations in the math questions
# Ask either addition, subtraction or multiplication questions.

# asks for Player 1’s name, and then Player 2’s name.
# From that point on,
# use their names instead of "Player 1" or "Player 2" when prompting them.

# when the game finishes, ask if they want to play again and do so based on their response.

# Restarting the game does not ask the players for their name again,
# it assumes that the same people are playing again.

# Now you can keep track of their score and
# at the end of each game let them know the player scores.

# Add colour to your output.
# A simple yet acceptable approach is to output bad outcomes as red
# and good outcomes as green.\

# ===============================================================================
#
#   EXCEPTIONAL GAMING    Week 2 -  Day 1
#
# Implement Custom Exceptions
# Rather than just having logical tests for whether answers are correct,
#  or players being out of lives, implement custom exceptions for these events.

# The following are some custom exceptions that you could do:

# 1. Invalid Guess

# Raise this custom exception class when the user does not input a numeric string for their guess.

# If the exception is raised, the caller should stay on the current player's turn
# and not switch to the next turn.

# Perhaps call this exception class something like InvalidGuessError ?

# 2. Invalid Name

# If you haven't implemented this already,
# at the beginning of the game have your program ask the players for their names,
#  one at a time, to be stored as @name in the Player instances.

# If the name input is empty, you shouldn't let them continue and ask for their name again.

# Tip

# You can raise RuntimeError exceptions for this exercise at first.
#  This is the simplest type of error to raise, because you can just use a string.

# Example:

# raise "Play out of turn!"

# ==============================================================================================================


require './player.rb'
require './question.rb'
require './utilities.rb'
require './game.rb'

quit_program = false
@player_two = initialize_player
@player_one = initialize_player


@player_one.get_player_name(1)
@player_two.get_player_name(2)

@game = initialize_game

while !quit_program do

  @player_one.initialize_score
  @player_two.initialize_score

  @game.reinitialize_game(@player_one)

  while !@game.quit_game do

    @question = initialize_question

    @question.generate_question(@game.current_player)

    @question.prompt_player_for_answer

    turn_result = @question.verify_answer(@game.current_player)

    if turn_result == "lost round"

      @game.display_lost_round_message

      if @game.current_player.lost_game?
        @game.actions_when_game_is_lost
      end

    else   #  won round

      @game.display_won_round_message

    end

    # end of round
    @game.switch_players(@player_one, @player_two)

  end

  quit_program = !@game.another_game?

end



